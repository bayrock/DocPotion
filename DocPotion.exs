defmodule DocPotion do
    def _read({read_dir, layouts}) do
        Enum.map(layouts, fn filename -> {filename, File.read!("#{read_dir}/#{filename}")} end)
    end

    def _alchemy({filename, layout}) do
        pattern = ~r/{(.+)}/
        {String.replace(filename, ".layout", ""), Regex.replace(pattern, layout, fn _, partial -> File.read!("docs/partials/#{partial}") end)}
    end

    def _write({filename, content}, write_dir \\ "./") do
        watermark = "\n\n<!-- This file was generated by DocPotion -->\n"
        File.write!("#{write_dir}#{filename}", "#{content}#{watermark}")
    end

    @doc """
    - Reads .layout(.md) files from directory (_read)
    - Replaces regex pattern with corresponding partials (_alchemy)
    - Writes full documents to the root directory (_write)

    Returns `{:ok, doc_count}` for success or raises runtime error upon failure

    ## Examples

        iex> DocPotion.build
        {:ok, doc_count}
 
    """
    def build(read_dir \\ "docs/layouts") do
        filenames = File.ls!(read_dir)
        layouts = {read_dir, filenames}

        result = _read(layouts)
        |> Enum.map(fn layouts -> _alchemy(layouts) end)
        |> Enum.each(fn docs -> _write(docs) end)

        {result, length(filenames)}
    end

    def success(count), do: IO.puts("Successfully built #{count} document file#{if count > 1 do "s" end}!")
    def error(e), do: raise "Error running #{__MODULE__}:\n#{e}!"
end

case DocPotion.build do
    {:ok, doc_count} -> DocPotion.success(doc_count)
    e -> DocPotion.error(e)
end
